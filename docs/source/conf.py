# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

import logging
import datetime
import os
import sys

sys.path.insert(0, ".")

import diracdoctools
import diracdoctools.cmd
from diracdoctools import fakeEnvironment, environmentSetup, DIRAC_DOC_MOCK_LIST
from diracdoctools.Utilities import setUpReadTheDocsEnvironment

logging.basicConfig(level=logging.INFO, format='%(name)25s: %(levelname)8s: %(message)s')
LOG = logging.getLogger('conf.py')

vmdiracRelease = os.environ.get('DIRACVERSION', 'integration')
if os.environ.get('READTHEDOCS') == 'True':
  vmdiracRelease = os.path.basename(os.path.abspath("../../"))
  if vmdiracRelease.startswith("rel-"):
    vmdiracRelease = vmdiracRelease[4:]
LOG.info('DIRACVERSION is %r', vmdiracRelease)

LOG.info('Current location %r', os.getcwd())
LOG.info('DiracDocTools location %r', diracdoctools.__file__)
LOG.info('DiracDocTools location %r', diracdoctools.Utilities.__file__)
LOG.info('DiracDocTools location %r', diracdoctools.cmd.__file__)
#...............................................................................
# configuration

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# AUTO SETUP START
if os.environ.get('READTHEDOCS') == 'True':
  setUpReadTheDocsEnvironment(moduleName='VMDIRAC')

  # re-create the RST files for the command references
  LOG.info('Building command reference')
  from diracdoctools.cmd.commandReference import run as buildCommandReference
  buildCommandReference(configFile='../docs.conf')

  # singlehtml build needs too much memory, so we need to create less code documentation
  buildType = 'limited' if any('singlehtml' in arg for arg in sys.argv) else 'full'
  LOG.info('Chosing build type: %r', buildType)
  from diracdoctools.cmd.codeReference import run as buildCodeDoc
  buildCodeDoc(configFile='../docs.conf', buildType=buildType)

  # Update dirac.cfg
  # LOG.info('Concatenating dirac.cfg')
  # from diracdoctools.cmd.concatcfg import run as updateCompleteDiracCFG
  # updateCompleteDiracCFG(configFile='../docs.conf')


# -- Project information -----------------------------------------------------

project = u'VMDIRAC'
copyright = u'2019, VMDIRAC Authors'
author = u'VMDIRAC Authors'

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = vmdiracRelease


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# if true complain about bad links
nitpicky = True
nitpick_ignore = [
    ('py:exc', 'TypeError'),
    ('py:exc', 'ValueError'),
    ('py:class', 'list'),
    ('py:class', 'python:list'),
    ('py:class', 'lists'),
    ('py:class', 'string'),  # inherited
    ('py:class', 'TypeError'), # transformation
    ('py:class', 'tuple'),
    ('py:class', 'bool/str'),
    ('py:class', 'StringIO'),
    ('py:class', 'Int'),
    ('py:class', 'python:list of tuples'),
    ('py:class', 'list of tuples'),
    ('py:class', 'dictionary'),
    ('py:class', "'Check'"),
    ('py:class', "'Read'"),
    ('py:class', "'Remove'"),
    ('py:class', "'Write'"),
    ('py:class', 'Boolean'),
    ('py:class', 'LFN str'),
    ('py:class', 'Single LFN string'),
    ('py:class', 'boolean'),
    ('py:class', 'integer'),
    ('py:class', 'list of LFNs'),
    ('py:class', 'list of lists of LFNs'),
    ('py:class', 'list of strings'),
    ('py:class', 'of string and dictionaries'),
    ('py:class', 'string in'),
]

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'VMDIRACdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'VMDIRAC.tex', u'VMDIRAC Documentation',
     u'VMDIRAC Authors', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'vmdirac', u'VMDIRAC Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'VMDIRAC', u'VMDIRAC Documentation',
     author, 'VMDIRAC', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

autodoc_mock_imports = DIRAC_DOC_MOCK_LIST + ['libcloud', 'boto3']
#autodoc_member_order = 'groupwise'
autodoc_member_order = 'bysource'

# A list of ignored prefixes for module index sorting.
modindex_common_prefix = ['VMDIRAC.']

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'DIRAC': ('https://dirac.readthedocs.io/en/rel-v6r21', None),
                       'python': ('https://docs.python.org/2.7', None),
                       }
